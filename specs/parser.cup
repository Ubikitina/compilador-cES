// ******************************************
// * parser.cup
// * Asignatura: Procesadores de lenguajes 1
// * Autor: Ubikitina
// * Curso: 2021-2022
// ******************************************

package compiler.syntax;

// Declaracion de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;

import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaracion del codigo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaracion de terminales

terminal Token PLUS;
terminal Token MINUS;
terminal Token NUM;
terminal Token ID;
terminal Token PARENTESISIZQ;
terminal Token PARENTESISDCH;
terminal Token LLAVEIZQ;
terminal Token LLAVEDCH;
terminal Token PUNTOCOMA;
terminal Token CASE;
terminal Token CONSTANT;
terminal Token BREAK;
terminal Token INT;
terminal Token WRITE;
terminal Token WRITEINT;
terminal Token ALTERNATIVE;
terminal Token WHILE;
terminal Token DEFAULT;
terminal Token MAIN;
terminal Token RETURN;
terminal Token IF;
terminal Token ELSE;
terminal Token TYPE;
terminal Token VOID;
terminal Token PRODUCT;
terminal Token MINOR;
terminal Token EQUAL;
terminal Token AND;
terminal Token NOT;
terminal Token AUTOINCREMENT;
terminal Token ASSIGN;
terminal Token ASSIGNWITHSUM;
terminal Token CORCHETEIZQ;
terminal Token CORCHETEDCH;
terminal Token STRING;
terminal Token DOSPUNTOS;
terminal Token COMA;
terminal Token VECT;
terminal Token CTE;



// Declaracion de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;

non terminal            mainFunction;
non terminal            sentencias;
non terminal            printString;
non terminal            printInt;
non terminal            epsilon;
non terminal            constante_simbolica;
non terminal            programa_general;
non terminal 			declaracion;
non terminal			tipo_funcion;
non terminal			asignacion;
non terminal			operador_aritmetico;
non terminal			expresionAritmetica;
non terminal			function;
non terminal			parametros_function;
non terminal			parametros_llamada;
non terminal			aux_declaracion;
non terminal			expresionLogica;
non terminal			if;
non terminal			bloque;
non terminal			una_sentencia;
non terminal			mientras;
non terminal			alternativa;
non terminal			casos;
non terminal			operador_logico;
non terminal			variable_con_tipo;
non terminal			variable;
non terminal			vector;
non terminal			creacion_tipo_vector;
// ...


// Declaracion de relaciones de precedencia
precedence left     PARENTESISIZQ,
					PARENTESISDCH,
					LLAVEIZQ,
					LLAVEDCH,
					AUTOINCREMENT,
					NOT,
					PRODUCT,
					PLUS,
					MINOR,
					EQUAL,
					AND;
precedence right	ELSE;
// ...

// Declaraci√≥n de reglas de produccion


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {:   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};


axiom ::= programa_general;

programa_general ::= constante_simbolica programa_general 
				   | function programa_general
				   | mainFunction;

mainFunction ::= VOID MAIN PARENTESISIZQ PARENTESISDCH bloque;

function ::= tipo_funcion ID PARENTESISIZQ parametros_function PARENTESISDCH bloque
		   | tipo_funcion ID PARENTESISIZQ PARENTESISDCH bloque;

parametros_function ::= parametros_function COMA variable_con_tipo
					  | variable_con_tipo;

bloque ::= bloque LLAVEIZQ sentencias bloque sentencias LLAVEDCH
		 | LLAVEIZQ sentencias bloque sentencias LLAVEDCH
		 | bloque LLAVEIZQ sentencias LLAVEDCH
		 | LLAVEIZQ sentencias LLAVEDCH;
					  
una_sentencia ::= printString 
             | printInt 
             | declaracion
             | asignacion
             | creacion_tipo_vector
             | expresionAritmetica PUNTOCOMA
             | expresionLogica PUNTOCOMA
             | if
             | mientras
             | alternativa
             | ID PARENTESISIZQ parametros_llamada PARENTESISDCH PUNTOCOMA
		 	 | RETURN PUNTOCOMA
		 	 | RETURN expresionAritmetica PUNTOCOMA
		 	 | RETURN expresionLogica PUNTOCOMA;

sentencias ::= sentencias una_sentencia
             | epsilon;

printString ::= WRITE PARENTESISIZQ STRING PARENTESISDCH PUNTOCOMA
			  | WRITE PARENTESISIZQ PARENTESISDCH PUNTOCOMA;

printInt ::= WRITEINT PARENTESISIZQ expresionAritmetica PARENTESISDCH PUNTOCOMA 
           | WRITEINT PARENTESISIZQ expresionLogica PARENTESISDCH PUNTOCOMA
           | WRITEINT PARENTESISIZQ PARENTESISDCH PUNTOCOMA;

declaracion ::= variable_con_tipo PUNTOCOMA
			  | variable_con_tipo aux_declaracion PUNTOCOMA
			  | variable_con_tipo ASSIGN NUM PUNTOCOMA
			  | variable_con_tipo ASSIGN NUM aux_declaracion PUNTOCOMA;

aux_declaracion ::= COMA variable aux_declaracion
				  | COMA variable
				  | COMA variable ASSIGN NUM aux_declaracion
				  | COMA variable ASSIGN NUM;

asignacion ::= variable ASSIGN expresionAritmetica PUNTOCOMA
			 | variable ASSIGN expresionLogica PUNTOCOMA
             | variable ASSIGNWITHSUM expresionAritmetica PUNTOCOMA
             | variable ASSIGNWITHSUM expresionLogica PUNTOCOMA;
             
parametros_llamada ::= parametros_llamada COMA expresionAritmetica
                     | parametros_llamada COMA expresionLogica
                     | parametros_llamada COMA STRING
                     | expresionAritmetica
                     | expresionLogica
                     | STRING;

expresionAritmetica ::= expresionAritmetica operador_aritmetico expresionAritmetica
					  | PARENTESISIZQ expresionAritmetica PARENTESISDCH
					  | ID PARENTESISIZQ parametros_llamada PARENTESISDCH
					  | ID PARENTESISIZQ PARENTESISDCH
					  | variable AUTOINCREMENT
					  | variable 
					  | NUM;

expresionLogica ::= expresionAritmetica operador_logico expresionAritmetica
				  | expresionLogica operador_logico expresionLogica
				  | expresionAritmetica operador_logico expresionLogica
				  | expresionLogica operador_logico expresionAritmetica
				  | PARENTESISIZQ expresionLogica PARENTESISDCH
				  | NOT expresionAritmetica
				  | NOT expresionLogica;

if ::= IF PARENTESISIZQ expresionLogica PARENTESISDCH bloque ELSE bloque
	 | IF PARENTESISIZQ expresionLogica PARENTESISDCH bloque
	 | IF PARENTESISIZQ expresionLogica PARENTESISDCH una_sentencia
	 | IF PARENTESISIZQ expresionLogica PARENTESISDCH una_sentencia ELSE una_sentencia;
	 
mientras ::= WHILE PARENTESISIZQ expresionLogica PARENTESISDCH bloque
		   | WHILE PARENTESISIZQ expresionLogica PARENTESISDCH una_sentencia;

alternativa ::= ALTERNATIVE PARENTESISIZQ expresionAritmetica PARENTESISDCH LLAVEIZQ casos DEFAULT DOSPUNTOS bloque BREAK PUNTOCOMA LLAVEDCH
			  | ALTERNATIVE PARENTESISIZQ expresionAritmetica PARENTESISDCH LLAVEIZQ casos DEFAULT DOSPUNTOS una_sentencia BREAK PUNTOCOMA LLAVEDCH
			  | ALTERNATIVE PARENTESISIZQ expresionAritmetica PARENTESISDCH LLAVEIZQ casos LLAVEDCH;

casos ::= casos CASE NUM DOSPUNTOS bloque BREAK PUNTOCOMA
		| casos CASE NUM DOSPUNTOS una_sentencia BREAK PUNTOCOMA
		| CASE NUM DOSPUNTOS bloque BREAK PUNTOCOMA
		| CASE NUM DOSPUNTOS una_sentencia BREAK PUNTOCOMA;
					  
constante_simbolica ::= CTE ID NUM PUNTOCOMA;

tipo_funcion ::= INT | VOID;

variable ::= ID | vector;

vector ::= ID CORCHETEIZQ expresionAritmetica CORCHETEDCH
	     | ID CORCHETEIZQ expresionLogica CORCHETEDCH;
	     
creacion_tipo_vector ::= TYPE INT vector PUNTOCOMA;

variable_con_tipo ::= INT ID | ID ID;

operador_aritmetico ::= PLUS | PRODUCT;

operador_logico ::= EQUAL | MINOR | AND;

epsilon ::= ;

